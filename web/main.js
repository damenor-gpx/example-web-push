function urlBase64ToUint8Array(base64String) {
  var padding = '='.repeat((4 - (base64String.length % 4)) % 4)
  var base64 = (base64String + padding).replace(/\-/g, '+').replace(/_/g, '/')

  var rawData = window.atob(base64)
  var outputArray = new Uint8Array(rawData.length)

  for (var i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i)
  }
  return outputArray
}

const API_URL = 'https://web-push-api.damenor.site'

navigator.serviceWorker.register('service-worker.js')

navigator.serviceWorker.ready
  .then(function (registration) {
    // Use the PushManager to get the user's subscription to the push service.
    return registration.pushManager.getSubscription().then(async function (subscription) {
      // If a subscription was found, return it.
      if (subscription) return subscription

      // Get the server's public key
      const response = await fetch(`${API_URL}/vapid-key`)
      const { publicKey } = await response.json()

      // Chrome doesn't accept the base64-encoded (string) vapidPublicKey yet
      const applicationServerKey = urlBase64ToUint8Array(publicKey)

      // Otherwise, subscribe the user (userVisibleOnly allows to specify that we don't plan to
      // send notifications that don't have a visible effect for the user).
      return registration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey,
      })
    })
  })
  .then(function (subscription) {
    // Send the subscription details to the server using the Fetch API.
    fetch(`${API_URL}/register`, {
      method: 'post',
      headers: {
        'Content-type': 'application/json',
      },
      body: JSON.stringify({ subscription }),
    })

    document.getElementById('doIt').onclick = function () {
      const payload = document.getElementById('notification-payload').value
      const delay = document.getElementById('notification-delay').value
      const ttl = document.getElementById('notification-ttl').value
      console.log({ payload, delay, ttl })
      // Ask the server to send the client a notification (for testing purposes, in actual
      // applications the push notification is likely going to be generated by some event
      // in the server).
      fetch(`${API_URL}/sendNotification`, {
        method: 'post',
        headers: {
          'Content-type': 'application/json',
        },
        body: JSON.stringify({ subscription, payload, delay, ttl }),
      })
    }
  })
